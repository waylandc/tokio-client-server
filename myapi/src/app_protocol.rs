// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `app_protocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct Wrapper {
    // message fields
    pub api: ::std::string::String,
    // message oneof groups
    pub msg: ::std::option::Option<Wrapper_oneof_msg>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Wrapper {
    fn default() -> &'a Wrapper {
        <Wrapper as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Wrapper_oneof_msg {
    loginReq(LoginRequest),
    loginResp(LoginResponse),
}

impl Wrapper {
    pub fn new() -> Wrapper {
        ::std::default::Default::default()
    }

    // string api = 1;


    pub fn get_api(&self) -> &str {
        &self.api
    }
    pub fn clear_api(&mut self) {
        self.api.clear();
    }

    // Param is passed by value, moved
    pub fn set_api(&mut self, v: ::std::string::String) {
        self.api = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_api(&mut self) -> &mut ::std::string::String {
        &mut self.api
    }

    // Take field
    pub fn take_api(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.api, ::std::string::String::new())
    }

    // .LoginRequest loginReq = 2;


    pub fn get_loginReq(&self) -> &LoginRequest {
        match self.msg {
            ::std::option::Option::Some(Wrapper_oneof_msg::loginReq(ref v)) => v,
            _ => <LoginRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_loginReq(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_loginReq(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(Wrapper_oneof_msg::loginReq(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_loginReq(&mut self, v: LoginRequest) {
        self.msg = ::std::option::Option::Some(Wrapper_oneof_msg::loginReq(v))
    }

    // Mutable pointer to the field.
    pub fn mut_loginReq(&mut self) -> &mut LoginRequest {
        if let ::std::option::Option::Some(Wrapper_oneof_msg::loginReq(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(Wrapper_oneof_msg::loginReq(LoginRequest::new()));
        }
        match self.msg {
            ::std::option::Option::Some(Wrapper_oneof_msg::loginReq(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_loginReq(&mut self) -> LoginRequest {
        if self.has_loginReq() {
            match self.msg.take() {
                ::std::option::Option::Some(Wrapper_oneof_msg::loginReq(v)) => v,
                _ => panic!(),
            }
        } else {
            LoginRequest::new()
        }
    }

    // .LoginResponse loginResp = 3;


    pub fn get_loginResp(&self) -> &LoginResponse {
        match self.msg {
            ::std::option::Option::Some(Wrapper_oneof_msg::loginResp(ref v)) => v,
            _ => <LoginResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_loginResp(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_loginResp(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(Wrapper_oneof_msg::loginResp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_loginResp(&mut self, v: LoginResponse) {
        self.msg = ::std::option::Option::Some(Wrapper_oneof_msg::loginResp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_loginResp(&mut self) -> &mut LoginResponse {
        if let ::std::option::Option::Some(Wrapper_oneof_msg::loginResp(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(Wrapper_oneof_msg::loginResp(LoginResponse::new()));
        }
        match self.msg {
            ::std::option::Option::Some(Wrapper_oneof_msg::loginResp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_loginResp(&mut self) -> LoginResponse {
        if self.has_loginResp() {
            match self.msg.take() {
                ::std::option::Option::Some(Wrapper_oneof_msg::loginResp(v)) => v,
                _ => panic!(),
            }
        } else {
            LoginResponse::new()
        }
    }
}

impl ::protobuf::Message for Wrapper {
    fn is_initialized(&self) -> bool {
        if let Some(Wrapper_oneof_msg::loginReq(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Wrapper_oneof_msg::loginResp(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.api)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(Wrapper_oneof_msg::loginReq(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(Wrapper_oneof_msg::loginResp(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.api.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.api);
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &Wrapper_oneof_msg::loginReq(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Wrapper_oneof_msg::loginResp(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.api.is_empty() {
            os.write_string(1, &self.api)?;
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &Wrapper_oneof_msg::loginReq(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Wrapper_oneof_msg::loginResp(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Wrapper {
        Wrapper::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "api",
                |m: &Wrapper| { &m.api },
                |m: &mut Wrapper| { &mut m.api },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LoginRequest>(
                "loginReq",
                Wrapper::has_loginReq,
                Wrapper::get_loginReq,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LoginResponse>(
                "loginResp",
                Wrapper::has_loginResp,
                Wrapper::get_loginResp,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Wrapper>(
                "Wrapper",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Wrapper {
        static instance: ::protobuf::rt::LazyV2<Wrapper> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Wrapper::new)
    }
}

impl ::protobuf::Clear for Wrapper {
    fn clear(&mut self) {
        self.api.clear();
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Wrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Wrapper {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoginRequest {
    // message fields
    pub username: ::std::string::String,
    pub password: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginRequest {
    fn default() -> &'a LoginRequest {
        <LoginRequest as ::protobuf::Message>::default_instance()
    }
}

impl LoginRequest {
    pub fn new() -> LoginRequest {
        ::std::default::Default::default()
    }

    // string username = 2;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }

    // string password = 3;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LoginRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.username);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.username.is_empty() {
            os.write_string(2, &self.username)?;
        }
        if !self.password.is_empty() {
            os.write_string(3, &self.password)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoginRequest {
        LoginRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "username",
                |m: &LoginRequest| { &m.username },
                |m: &mut LoginRequest| { &mut m.username },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "password",
                |m: &LoginRequest| { &m.password },
                |m: &mut LoginRequest| { &mut m.password },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LoginRequest>(
                "LoginRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LoginRequest {
        static instance: ::protobuf::rt::LazyV2<LoginRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LoginRequest::new)
    }
}

impl ::protobuf::Clear for LoginRequest {
    fn clear(&mut self) {
        self.username.clear();
        self.password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoginResponse {
    // message fields
    pub status: bool,
    pub username: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginResponse {
    fn default() -> &'a LoginResponse {
        <LoginResponse as ::protobuf::Message>::default_instance()
    }
}

impl LoginResponse {
    pub fn new() -> LoginResponse {
        ::std::default::Default::default()
    }

    // bool status = 2;


    pub fn get_status(&self) -> bool {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = false;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: bool) {
        self.status = v;
    }

    // string username = 3;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LoginResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.status = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != false {
            my_size += 2;
        }
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.username);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != false {
            os.write_bool(2, self.status)?;
        }
        if !self.username.is_empty() {
            os.write_string(3, &self.username)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoginResponse {
        LoginResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "status",
                |m: &LoginResponse| { &m.status },
                |m: &mut LoginResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "username",
                |m: &LoginResponse| { &m.username },
                |m: &mut LoginResponse| { &mut m.username },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LoginResponse>(
                "LoginResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LoginResponse {
        static instance: ::protobuf::rt::LazyV2<LoginResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LoginResponse::new)
    }
}

impl ::protobuf::Clear for LoginResponse {
    fn clear(&mut self) {
        self.status = false;
        self.username.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12app_protocol.proto\"\x7f\n\x07Wrapper\x12\x10\n\x03api\x18\x01\x20\
    \x01(\tR\x03api\x12+\n\x08loginReq\x18\x02\x20\x01(\x0b2\r.LoginRequestH\
    \0R\x08loginReq\x12.\n\tloginResp\x18\x03\x20\x01(\x0b2\x0e.LoginRespons\
    eH\0R\tloginRespB\x05\n\x03msg\"F\n\x0cLoginRequest\x12\x1a\n\x08usernam\
    e\x18\x02\x20\x01(\tR\x08username\x12\x1a\n\x08password\x18\x03\x20\x01(\
    \tR\x08password\"C\n\rLoginResponse\x12\x16\n\x06status\x18\x02\x20\x01(\
    \x08R\x06status\x12\x1a\n\x08username\x18\x03\x20\x01(\tR\x08usernameb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
